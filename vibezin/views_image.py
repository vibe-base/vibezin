"""
Views for handling AI image generation.
"""
import json
import logging
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from django.views.decorators.csrf import ensure_csrf_cookie

from .models import Vibe, GeneratedImage
from .image_utils import generate_image, save_generated_image

logger = logging.getLogger(__name__)

@login_required
@require_POST
@ensure_csrf_cookie
def generate_image_view(request, vibe_slug=None):
    """
    API endpoint for generating an image using DALL-E.

    Args:
        request: The HTTP request
        vibe_slug: Optional slug of the vibe to associate the image with

    Returns:
        JSON response with the generated image URL
    """
    # Check if the user has an OpenAI API key
    if not hasattr(request.user, 'profile') or not request.user.profile.chatgpt_api_key:
        return JsonResponse({
            'success': False,
            'error': "You need to add an OpenAI API key to your profile to generate images."
        })

    # Get the vibe if a slug was provided
    vibe = None
    if vibe_slug:
        vibe = get_object_or_404(Vibe, slug=vibe_slug)
        # Check if the user is the owner of the vibe
        if vibe.user != request.user:
            return JsonResponse({
                'success': False,
                'error': "You don't have permission to generate images for this vibe."
            })

    # Get the prompt from the request
    try:
        # First try to get data from POST
        prompt = request.POST.get('prompt', '').strip()
        size = request.POST.get('size', '1024x1024')
        quality = request.POST.get('quality', 'standard')

        # If not in POST data, try to parse JSON
        if not prompt and request.content_type == 'application/json':
            data = json.loads(request.body.decode('utf-8'))
            prompt = data.get('prompt', '').strip()
            size = data.get('size', '1024x1024')
            quality = data.get('quality', 'standard')

        if not prompt:
            return JsonResponse({
                'success': False,
                'error': "Prompt cannot be empty."
            })
    except Exception as e:
        logger.exception(f"Error parsing image generation request: {str(e)}")
        return JsonResponse({
            'success': False,
            'error': f"Error parsing request: {str(e)}"
        })

    # Generate the image
    api_key = request.user.profile.chatgpt_api_key
    result = generate_image(api_key, prompt, size, quality)

    if result.get('success', False):
        # Save the image
        image_url = result.get('image_url')
        revised_prompt = result.get('revised_prompt', prompt)

        save_result = save_generated_image(
            user=request.user,
            prompt=prompt,
            image_url=image_url,
            revised_prompt=revised_prompt
        )

        if save_result.get('success', False):
            # If a vibe was provided, associate the image with it
            if vibe:
                image = GeneratedImage.objects.get(id=save_result.get('image_id'))
                image.vibe = vibe
                image.save()

            return JsonResponse({
                'success': True,
                'image_url': save_result.get('image_url'),
                'revised_prompt': revised_prompt,
                'message': "Image generated and saved successfully."
            })
        else:
            return JsonResponse({
                'success': False,
                'error': save_result.get('error', "Failed to save the generated image.")
            })
    else:
        return JsonResponse({
            'success': False,
            'error': result.get('error', "Failed to generate image."),
            'details': result.get('details', "")
        })

@login_required
def user_images(request):
    """
    View for displaying all images generated by the current user.

    Args:
        request: The HTTP request

    Returns:
        Rendered template with the user's generated images
    """
    images = GeneratedImage.objects.filter(user=request.user).order_by('-created_at')

    # If the request is for JSON data (API call)
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        image_list = [{
            'id': image.id,
            'prompt': image.prompt,
            'revised_prompt': image.revised_prompt,
            'image_url': image.image_url,
            'model': image.model,
            'created_at': image.created_at.isoformat(),
            'vibe_title': image.vibe.title if image.vibe else None,
            'vibe_slug': image.vibe.slug if image.vibe else None
        } for image in images]

        return JsonResponse({
            'success': True,
            'images': image_list
        })

    # Otherwise, render the template
    context = {
        'images': images,
        'title': 'My Generated Images'
    }
    return render(request, 'vibezin/image_gallery.html', context)


@login_required
def doge_generator(request):
    """
    View for the doge image generator page.

    Args:
        request: The HTTP request

    Returns:
        Rendered template for the doge generator
    """
    context = {
        'title': 'Doge Image Generator'
    }
    return render(request, 'vibezin/doge_generator.html', context)
